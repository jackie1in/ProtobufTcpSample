plugins {
    id 'com.android.application'
    id "com.google.protobuf" version "0.8.18"
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "silencecorner.github.com"
        minSdk 26
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    dataBinding {
        enabled = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    flavorDimensions 'local'
    productFlavors{
        local {
            dimension 'local'
            buildConfigField("String", "SERVER_IP", "\"" + getLocalIPv4()[0] + "\"")
            buildConfigField("int", "SERVER_PORT", getProperty("server.port"))
        }
    }

}
def getProperty(String propName) {
    def propsFile = rootProject.file("gradle.properties")
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}

def getLocalIPv4() {
    def ip4s = []
    NetworkInterface.getNetworkInterfaces()
            .findAll { it.isUp() && !it.isLoopback() && !it.isVirtual() }
            .each {
                it.getInetAddresses()
                        .findAll { !it.isLoopbackAddress() && it instanceof Inet4Address }
                        .each {
                            ip4s << it.getHostAddress()
                        }
            }
    return ip4s
}

task printIp {
    doLast {
        println getLocalIPv4()
    }
}

dependencies {

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    implementation 'com.google.protobuf:protobuf-javalite:3.19.1'
    protobuf files("$rootDir/model")
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.19.1'
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}